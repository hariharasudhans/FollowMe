#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="db461f27e0e0f14766adcaa12f00da8405")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertuser_registration(user_registration instance);
  partial void Updateuser_registration(user_registration instance);
  partial void Deleteuser_registration(user_registration instance);
  partial void Insertuser_followup(user_followup instance);
  partial void Updateuser_followup(user_followup instance);
  partial void Deleteuser_followup(user_followup instance);
  partial void Insertuser_message(user_message instance);
  partial void Updateuser_message(user_message instance);
  partial void Deleteuser_message(user_message instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["db461f27e0e0f14766adcaa12f00da8405ConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<user_registration> user_registrations
	{
		get
		{
			return this.GetTable<user_registration>();
		}
	}
	
	public System.Data.Linq.Table<user_followup> user_followups
	{
		get
		{
			return this.GetTable<user_followup>();
		}
	}
	
	public System.Data.Linq.Table<user_message> user_messages
	{
		get
		{
			return this.GetTable<user_message>();
		}
	}
}

[Table(Name="dbo.user_registration")]
public partial class user_registration : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _user_id;
	
	private string _name;
	
	private string _email;
	
	private string _password;
	
	private EntitySet<user_followup> _user_followups;
	
	private EntitySet<user_followup> _user_followups1;
	
	private EntitySet<user_message> _user_messages;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(long value);
    partial void Onuser_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
	
	public user_registration()
	{
		this._user_followups = new EntitySet<user_followup>(new Action<user_followup>(this.attach_user_followups), new Action<user_followup>(this.detach_user_followups));
		this._user_followups1 = new EntitySet<user_followup>(new Action<user_followup>(this.attach_user_followups1), new Action<user_followup>(this.detach_user_followups1));
		this._user_messages = new EntitySet<user_message>(new Action<user_message>(this.attach_user_messages), new Action<user_message>(this.detach_user_messages));
		OnCreated();
	}
	
	[Column(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long user_id
	{
		get
		{
			return this._user_id;
		}
		set
		{
			if ((this._user_id != value))
			{
				this.Onuser_idChanging(value);
				this.SendPropertyChanging();
				this._user_id = value;
				this.SendPropertyChanged("user_id");
				this.Onuser_idChanged();
			}
		}
	}
	
	[Column(Storage="_name", DbType="VarChar(MAX)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[Column(Storage="_email", DbType="NVarChar(MAX)")]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[Column(Storage="_password", DbType="NVarChar(MAX)")]
	public string password
	{
		get
		{
			return this._password;
		}
		set
		{
			if ((this._password != value))
			{
				this.OnpasswordChanging(value);
				this.SendPropertyChanging();
				this._password = value;
				this.SendPropertyChanged("password");
				this.OnpasswordChanged();
			}
		}
	}
	
	[Association(Name="user_registration_user_followup", Storage="_user_followups", ThisKey="user_id", OtherKey="follower_user_id")]
	public EntitySet<user_followup> user_followups
	{
		get
		{
			return this._user_followups;
		}
		set
		{
			this._user_followups.Assign(value);
		}
	}
	
	[Association(Name="user_registration_user_followup1", Storage="_user_followups1", ThisKey="user_id", OtherKey="following_user_id")]
	public EntitySet<user_followup> user_followups1
	{
		get
		{
			return this._user_followups1;
		}
		set
		{
			this._user_followups1.Assign(value);
		}
	}
	
	[Association(Name="user_registration_user_message", Storage="_user_messages", ThisKey="user_id", OtherKey="user_id")]
	public EntitySet<user_message> user_messages
	{
		get
		{
			return this._user_messages;
		}
		set
		{
			this._user_messages.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_user_followups(user_followup entity)
	{
		this.SendPropertyChanging();
		entity.user_registration = this;
	}
	
	private void detach_user_followups(user_followup entity)
	{
		this.SendPropertyChanging();
		entity.user_registration = null;
	}
	
	private void attach_user_followups1(user_followup entity)
	{
		this.SendPropertyChanging();
		entity.user_registration1 = this;
	}
	
	private void detach_user_followups1(user_followup entity)
	{
		this.SendPropertyChanging();
		entity.user_registration1 = null;
	}
	
	private void attach_user_messages(user_message entity)
	{
		this.SendPropertyChanging();
		entity.user_registration = this;
	}
	
	private void detach_user_messages(user_message entity)
	{
		this.SendPropertyChanging();
		entity.user_registration = null;
	}
}

[Table(Name="dbo.user_followup")]
public partial class user_followup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private System.Nullable<long> _follower_user_id;
	
	private System.Nullable<long> _following_user_id;
	
	private EntityRef<user_registration> _user_registration;
	
	private EntityRef<user_registration> _user_registration1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void Onfollower_user_idChanging(System.Nullable<long> value);
    partial void Onfollower_user_idChanged();
    partial void Onfollowing_user_idChanging(System.Nullable<long> value);
    partial void Onfollowing_user_idChanged();
    #endregion
	
	public user_followup()
	{
		this._user_registration = default(EntityRef<user_registration>);
		this._user_registration1 = default(EntityRef<user_registration>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_follower_user_id", DbType="BigInt")]
	public System.Nullable<long> follower_user_id
	{
		get
		{
			return this._follower_user_id;
		}
		set
		{
			if ((this._follower_user_id != value))
			{
				if (this._user_registration.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onfollower_user_idChanging(value);
				this.SendPropertyChanging();
				this._follower_user_id = value;
				this.SendPropertyChanged("follower_user_id");
				this.Onfollower_user_idChanged();
			}
		}
	}
	
	[Column(Storage="_following_user_id", DbType="BigInt")]
	public System.Nullable<long> following_user_id
	{
		get
		{
			return this._following_user_id;
		}
		set
		{
			if ((this._following_user_id != value))
			{
				if (this._user_registration1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onfollowing_user_idChanging(value);
				this.SendPropertyChanging();
				this._following_user_id = value;
				this.SendPropertyChanged("following_user_id");
				this.Onfollowing_user_idChanged();
			}
		}
	}
	
	[Association(Name="user_registration_user_followup", Storage="_user_registration", ThisKey="follower_user_id", OtherKey="user_id", IsForeignKey=true)]
	public user_registration user_registration
	{
		get
		{
			return this._user_registration.Entity;
		}
		set
		{
			user_registration previousValue = this._user_registration.Entity;
			if (((previousValue != value) 
						|| (this._user_registration.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user_registration.Entity = null;
					previousValue.user_followups.Remove(this);
				}
				this._user_registration.Entity = value;
				if ((value != null))
				{
					value.user_followups.Add(this);
					this._follower_user_id = value.user_id;
				}
				else
				{
					this._follower_user_id = default(Nullable<long>);
				}
				this.SendPropertyChanged("user_registration");
			}
		}
	}
	
	[Association(Name="user_registration_user_followup1", Storage="_user_registration1", ThisKey="following_user_id", OtherKey="user_id", IsForeignKey=true)]
	public user_registration user_registration1
	{
		get
		{
			return this._user_registration1.Entity;
		}
		set
		{
			user_registration previousValue = this._user_registration1.Entity;
			if (((previousValue != value) 
						|| (this._user_registration1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user_registration1.Entity = null;
					previousValue.user_followups1.Remove(this);
				}
				this._user_registration1.Entity = value;
				if ((value != null))
				{
					value.user_followups1.Add(this);
					this._following_user_id = value.user_id;
				}
				else
				{
					this._following_user_id = default(Nullable<long>);
				}
				this.SendPropertyChanged("user_registration1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.user_message")]
public partial class user_message : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private System.Nullable<long> _user_id;
	
	private string _message;
	
	private EntityRef<user_registration> _user_registration;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void Onuser_idChanging(System.Nullable<long> value);
    partial void Onuser_idChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    #endregion
	
	public user_message()
	{
		this._user_registration = default(EntityRef<user_registration>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_user_id", DbType="BigInt")]
	public System.Nullable<long> user_id
	{
		get
		{
			return this._user_id;
		}
		set
		{
			if ((this._user_id != value))
			{
				if (this._user_registration.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onuser_idChanging(value);
				this.SendPropertyChanging();
				this._user_id = value;
				this.SendPropertyChanged("user_id");
				this.Onuser_idChanged();
			}
		}
	}
	
	[Column(Storage="_message", DbType="NVarChar(MAX)")]
	public string message
	{
		get
		{
			return this._message;
		}
		set
		{
			if ((this._message != value))
			{
				this.OnmessageChanging(value);
				this.SendPropertyChanging();
				this._message = value;
				this.SendPropertyChanged("message");
				this.OnmessageChanged();
			}
		}
	}
	
	[Association(Name="user_registration_user_message", Storage="_user_registration", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
	public user_registration user_registration
	{
		get
		{
			return this._user_registration.Entity;
		}
		set
		{
			user_registration previousValue = this._user_registration.Entity;
			if (((previousValue != value) 
						|| (this._user_registration.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user_registration.Entity = null;
					previousValue.user_messages.Remove(this);
				}
				this._user_registration.Entity = value;
				if ((value != null))
				{
					value.user_messages.Add(this);
					this._user_id = value.user_id;
				}
				else
				{
					this._user_id = default(Nullable<long>);
				}
				this.SendPropertyChanged("user_registration");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
